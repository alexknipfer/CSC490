%{
import java.io.*;
import java.util.Scanner;
%}

%token ADDOP
%token EVAL
%token MULOP
%token NUMBER
%token PARENL
%token PARENR

// higher on this list means lower the precedence
%left ADDOP
%left MULOP

%%

input : line input |
	;

line: expr EVAL {System.out.println("got another \"line\" with value = " + $1.dval);};

expr: NUMBER {$$ = $1;} |

	expr ADDOP expr {if($2.sval.equals("+"))
				$$ = new ParserVal ($1.dval + $3.dval);
			   else //must be "-"
				$$ = new ParserVal($1.dval - $3.dval); 
				} |

	expr MULOP expr {if($2.sval.equals("*"))
				$$ = new ParserVal ($1.dval * $3.dval);
			   else //must be "-"
				$$ = new ParserVal($1.dval / $3.dval); 
				} |
	
	PARENL expr PARENR { $$ = $2; };



%%

private SimpleLexer lex;

public void build(String fromFile){
	lex = new SimpleLexer(fromFile);
}


public int yylex()
{
	String t = lex.nextToken();

	if(t == null){
		return -1;
	}

	if(t.equals("==")){
		return EVAL;
	}

	else if(Character.isDigit(t.charAt(0))){
		yylval = new ParserVal(Double.parseDouble(t));
		return NUMBER;
	}

	else if(t.charAt(0) == '+' || t.charAt(0) == '-'){
		yylval = new ParserVal(t);
		return ADDOP;
	}

	else if(t.charAt(0) == '*' || t.charAt(0) == '/'){
		yylval = new ParserVal(t);
		return MULOP;
	}
	
	else if(t.charAt(0) == '('){
		return PARENL;
	}

	else if(t.charAt(0) == ')'){
		return PARENR;
	}

	System.err.println("unexpected token: " + t);
	return 0;
}

public void yyerror(String err){
	System.err.println(err);
}

public static void main(String args[]){
	Parser myParser = new Parser(false);
	myParser.build(args[0]);
	myParser.yyparse();
}
